# -*- coding: utf-8 -*-
"""Tsoucky.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1baeWCmFNAVGyQfU0ip0PEzAu_XkYYe9_
"""

import json
from difflib import get_close_matches
from typing import Union


def charger_knowledge_base(chemin_fichier: str) -> dict:
    """Charger la base de connaissances depuis un fichier JSON."""
    try:
        with open(chemin_fichier, 'r') as fichier:
            donnees: dict = json.load(fichier)
        return donnees
    except FileNotFoundError:
        # Si le fichier n'existe pas, créer une nouvelle base de connaissances
        return {"questions": []}


def sauvegarder_knowledge_base(chemin_fichier: str, donnees: dict):
    """Sauvegarder la base de connaissances dans un fichier JSON."""
    with open(chemin_fichier, 'w') as fichier:
        json.dump(donnees, fichier, indent=2)


def trouver_meilleure_correspondance(question_utilisateur: str, questions: list[str]) -> Union[str, None]:
    """Trouver la question la plus proche dans la base de connaissances."""
    correspondances = get_close_matches(question_utilisateur, questions, n=1, cutoff=0.6)
    return correspondances[0] if correspondances else None


def obtenir_reponse_pour_question(question: str, knowledge_base: dict) -> Union[str, None]:
    """Retourner la réponse à une question depuis la base de connaissances."""
    for q in knowledge_base["questions"]:
        if q["question"] == question:
            return q["answer"]
    return None


def chatbot():
    """Boucle principale du chatbot où il apprend des interactions avec l'utilisateur."""
    knowledge_base = charger_knowledge_base('knowledge_base.json')

    print("Bonjour ! Je suis Tsoucky, un chatbot qui apprend. Tapez 'quit' pour quitter la conversation.")

    while True:
        question_utilisateur = input("Vous : ")

        if question_utilisateur.lower() == 'quit':
            print("Au revoir !")
            break

        meilleure_correspondance = trouver_meilleure_correspondance(question_utilisateur, [q["question"] for q in knowledge_base["questions"]])

        if meilleure_correspondance:
            reponse = obtenir_reponse_pour_question(meilleure_correspondance, knowledge_base)
            print(f"Tsoucky : {reponse}")
        else:
            print("Tsoucky : Je ne connais pas la réponse. Peux-tu m'apprendre ?")
            nouvelle_reponse = input("Tape la réponse ou 'skip' pour passer : ")

            if nouvelle_reponse.lower() != 'skip':
                knowledge_base["questions"].append({"question": question_utilisateur, "answer": nouvelle_reponse})
                sauvegarder_knowledge_base('knowledge_base.json', knowledge_base)
                print("Tsoucky : Merci ! J'ai appris quelque chose de nouveau !")


if __name__ == '__main__':
    chatbot()